<?php
// Mage Grid Component Template
//
// This template renders the main grid UI using Grid.js (https://gridjs.io/docs)
// It is designed for maximum flexibility, AI-driven extension, and easy customization.
//
// Key features:
// - Dynamic field and filter rendering
// - AJAX data loading and server-side pagination
// - Customizable columns and cell formatters
// - Integration with additional HTML/JS templates (see $block->getAditionalHTML())
//
// For full Grid.js documentation and advanced configuration, see:
// https://gridjs.io/docs

$fields = $block->getFieldNames(); // array: ['id', 'order_number', ...]
$fieldsFull = $block->getFields(); // associative array: ['id' => 'ID', ...]
$jsonGridData = $block->getGridJsonData(); // JSON-encoded grid data
$fieldsConfig = $block->getFieldsConfig();
$tableName = $block->getTableName();
$aditionalHTML = $block->getAditionalHTML();

// Get filter values from request
$filters = $this->getRequest()->getParam('filter', []);

// Process field configurations and filter values
$processedFields = $block->getProcessedFields($fields, $fieldsConfig, $filters);

// Now start rendering the template
?>
<div id="grid-wrapper">
    <!-- Include filters template with processed data -->
    <?php 
    $filterData = [
        'fields' => $processedFields,
        'filters' => $filters
    ];
    include __DIR__ . '/filters.phtml'; 
    ?>

    <!-- Main grid container (Grid.js will render here) -->
    <div id="wrapper"></div>

    <!-- Grid.js CSS theme -->
    <link href="https://unpkg.com/gridjs/dist/theme/mermaid.min.css" rel="stylesheet" />

    <!-- Dropdown for selecting page size -->
    <div>
        <label for="pageSize">Show per page:</label>
        <select id="pageSize">
            <option value="10">10</option>
            <option value="20">20</option>
            <option value="40">40</option>
            <option value="100">100</option>
        </select>
        <label for="totalCount"></label>
    </div>
</div>

<script type="module">
    import { Grid, html } from 'https://unpkg.com/gridjs/dist/gridjs.module.js';

    document.addEventListener('DOMContentLoaded', function() {
        // NOTE: gridData is loaded via AJAX in the server config below
        const gridData = [];

        // Read pagination and filter state from URL
        const urlParams = new URLSearchParams(window.location.search);
        const defaultLimit = parseInt(urlParams.get('limit')) || 40;
        const defaultPage = parseInt(urlParams.get('page')) || 1;
        const totalCount = 0;
        const columnsHeader = <?php echo json_encode(array_map('ucwords', str_replace('_', ' ', array_keys($fields)))); ?>;
        const columnFilters = <?php echo json_encode(array_keys($fields)); ?>;

        // List of fields that should be rendered as HTML (customize as needed)
        const htmlFields = ['Grand Total', 'Status'];

        // Define columns for Grid.js, using HTML formatter for special fields
        const gridColumns = columnsHeader.map(col => {
            if (htmlFields.includes(col)) {
                return {
                    name: col,
                    formatter: cell => {
                        if (!cell) return '';
                        return html(cell);
                    }
                };
            }
            return col;
        });

        // Initialize Grid.js with server-side data loading and pagination
        const grid = new Grid({
            columns: gridColumns,
            data: gridData, // Will be replaced by AJAX
            pagination: {
                enabled: true,
                limit: defaultLimit,
                resetPageOnUpdate: true,
                page: defaultPage,
                total: totalCount, // Will be set by server response
                server: {
                    url: (prev, page, limit) => {
                        // Compose AJAX URL for server-side pagination
                        let curentUrl = window.location.href;
                        const delimeter = curentUrl.includes('?') ? '&' : '?';
                        let url = `${prev}${delimeter}limit=${limit}&offset=${page * limit}&data=true`;
                        return url;
                    }
                }
            },
            server: {
                url: window.location.href,
                then: data => {
                    if (data.error) {
                        console.error('Error in grid data:', data.error);
                        return [];
                    }
                    if (!data || !data.data) {
                        console.error('Error: Invalid data structure received', data);
                        return [];
                    }
                    return data.data;
                },
                total: data => {
                    if (!data.total) {
                        console.error('Error: Invalid total count received', data);
                        return 0;
                    }
                    return data.total;
                }
            },
            sort: true,
            search: true,
            resizable: true
        }).render(document.getElementById('wrapper'));

        // Update URL with current page on pagination change
        grid.on('pagination:changed', function(page) {
            const url = new URL(window.location.href);
            url.searchParams.set('page', page);
            window.history.replaceState(null, '', url.toString());
        });

        if (document.getElementById("pageSize")) {
            document.getElementById("pageSize").value = defaultLimit;
        }
    });
</script>

<!-- Render any additional HTML/JS templates configured via layout XML -->
<?= $block->getAditionalHTML() ?>
