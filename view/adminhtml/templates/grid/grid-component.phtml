<?php
// Mage Grid Component Template
//
// This template renders the main grid UI using Grid.js (https://gridjs.io/docs)
// It is designed for maximum flexibility, AI-driven extension, and easy customization.
//
// Key features:
// - Dynamic field and filter rendering
// - AJAX data loading and server-side pagination
// - Customizable columns and cell formatters
// - Integration with additional HTML/JS templates (see $block->getAditionalHTML())
//
// For full Grid.js documentation and advanced configuration, see:
// https://gridjs.io/docs

$fields = array_keys($block->getFieldsNames());  // array: ['id', 'order_number', ...]
$fieldsFull = $block->getFields();  // associative array: ['id' => 'ID', ...]
$block->lazyLoadCollectionClass();
// $jsonGridData = $block->getGridJsonData(); // JSON-encoded grid data
$fieldsConfig = $block->getFieldsConfig();
$tableName = $block->getTableName();
$fieldsNames = $block->getFieldsNames();
$aditionalHTML = $block->getAditionalHTML();
$fieldsHtml = $block->getFieldsHtml();
// Get filter values from request
$filters = $this->getRequest()->getParam('filter', []);

// Process field configurations and filter values
$processedFields = $block->getProcessedFields($fields, $fieldsConfig, $filters);

$filterData = [
    'fields' => $processedFields,
    'filters' => $filters
];
// Now start rendering the template
?>
<div id="grid-wrapper">
    <!-- Render filters through block method -->
    <?= $block->getFiltersHtml($filterData) ?>

    <!-- Main grid container (Grid.js will render here) -->
    <div id="wrapper"></div>

    <!-- Grid.js CSS theme -->
    <link href="https://unpkg.com/gridjs/dist/theme/mermaid.min.css" rel="stylesheet" />

    <!-- Dropdown for selecting page size -->
    <div>
        <label for="pageSize">Show per page:</label>
        <select id="pageSize">
            <option value="10">10</option>
            <option value="20">20</option>
            <option value="40">40</option>
            <option value="100">100</option>
        </select>
        <label for="totalCount"></label>
    </div>
</div>

<?php if ($showPerformanceMetrics = true): ?>
<!-- Performance metrics -->
<div id="grid-time-info" class="grid-performance-metrics">
    <div class="metric">
        <span class="label">Server SQL Query time:</span>
        <span id="grid-time-sql" class="value">-</span>
    </div>
    <div class="metric">
        <span class="label">Server Count time:</span>
        <span id="grid-time-count" class="value">-</span>
    </div>
</div>
<?php endif; ?>
<script type="module">

    // Flag to prevent multiple AJAX reloads you can change it and reload entire page on filter 
    window.ajaxReload = true;
    window.totalRecordCount = 0;
    window.dataUrl = "<?php echo $block->getUrl('grid/grid/data'); ?>";

    window.buildDataUrl = function(page, limit) {
        let url = window.location.href;
        if (window.dataUrl) {
            url = window.dataUrl;
        }
        
        const urlParams = new URLSearchParams(window.location.search);
        
        // Add all current parameters to the URL
        urlParams.forEach((value, key) => {
            if (key !== 'data') {
                url += (url.includes('?') ? '&' : '?') + `${key}=${encodeURIComponent(value)}`;
            }
        });
        
        // Add pagination parameters
        //url += (url.includes('?') ? '&' : '?') + `page=${page + 1}&pageSize=${limit}`;

        console.log("Grid Data URL:" + url);
        
        return url;
    }

    import { Grid, html } from 'https://unpkg.com/gridjs/dist/gridjs.module.js';

    document.addEventListener('DOMContentLoaded', function() {
        // NOTE: gridData is loaded via AJAX in the server config below. inject echo jsonGridData
        <?php // echo "const gridData = " . $jsonGridData . ";"; ?>
        const gridData = [];
        // Read pagination and filter state from URL
        const urlParams = new URLSearchParams(window.location.search);
        const defaultLimit = parseInt(urlParams.get('pageSize')) || 40;
        const defaultPage = parseInt(urlParams.get('page')) || 1;
        const totalCount = 0;
        const fieldsConfig = <?php echo json_encode($fieldsConfig); ?>;
        const fieldsNames = <?php echo json_encode($fieldsNames); ?>;
        const columnFilters = Object.keys(fieldsNames);

        // List of fields that should be rendered as HTML (customize as needed)
        const htmlFields = <?php echo json_encode($fieldsHtml); ?>;

        // Define columns for Grid.js, using HTML formatter for special fields
        const gridColumns = columnFilters.map(fieldName => {
            const config = fieldsConfig[fieldName] || {};
            // Use the label from fieldsNames
            const displayName = fieldsNames[fieldName];
            
            let columnConfig = {
                name: displayName,
                attributes: (cell, row, colIndex) => {
                    if (config.hidden) {
                        return {
                            style: 'display: none !important'
                        };
                    }
                    return {};
                }
            };

            if (htmlFields.includes(fieldName)) {
                columnConfig.formatter = cell => {
                    if (!cell) return '';
                    return html(cell);
                };
            }

            return columnConfig;
        });

        // Initialize Grid.js with server-side data loading and pagination
        window.grid = new Grid({
            style: {
                td: {
                    border: '1px solid #ccc'
                },
                table: {
                    'font-size': '15px'
                }
            },
            className: {
                td: 'my-td-class',
                table: 'custom-table-class'
            },
            language: {
                search: {
                    placeholder: '🔍 Search...'
                },
                pagination: {
                    previous: '⬅️',
                    next: '➡️',
                    showing: 'Displaying',
                    results: () => {
                        if (window.totalRecordCount >= 999) {
                            return '+ Records(More than 999)';
                        }
                        return `Records`;
                    }
                }
            },
            fixedHeader: true,
            height: '100%',
            columns: gridColumns,
            data: gridData, // Will be replaced by AJAX
            pagination: {
                enabled: true,
                limit: defaultLimit,
                resetPageOnUpdate: true,
                page: defaultPage,
                total: totalCount, // Will be set by server response
                server: {
                    url: (prev, page, limit) => {
                        console.log("Pagination");
                        const url = new URL(window.location.href);
                        url.searchParams.set('page', page +1);
                        url.searchParams.set('pageSize', limit);
                        window.history.replaceState(null, '', url.toString());
                        return buildDataUrl(page, limit);
                        
                        /*
                        // Compose AJAX URL for server-side pagination
                        let curentUrl = window.location.href;
                        const delimeter = curentUrl.includes('?') ? '&' : '?';
                        let url = `${prev}${delimeter}limit=${limit}&offset=${page * limit}&data=true`;
                        return url;
                        */
                        
                    }
                }
            },
            sort: {
                multiColumn: false,
                server: {
                    url: (prev, columns) => {
                        console.log("Sort");
                        if (!columns.length) {
                            console.log("No columns to sort");
                            return prev;
                        }
                        
                        const col = columns[0];
                        const dir = col.direction === 1 ? 'asc' : 'desc';
                        
                        // Get the field name from the column index
                        const displayName = gridColumns[col.index].name;
                        const fieldKey = Object.keys(fieldsNames).find(key => fieldsNames[key] === displayName);
                        const fieldName = fieldKey;

                        const url = new URL(window.location.href);
                        url.searchParams.set('sortField', fieldName);
                        url.searchParams.set('sortOrder', dir);
                        window.history.replaceState(null, '', url.toString());

                        const page = url.searchParams.get('page') || 1;
                        const limit = url.searchParams.get('pageSize') || defaultLimit;

                        return buildDataUrl(page, limit);
                    }
                }
            },
            server: {
                url: (prev, page, limit) => {
                    console.log("Server");
                    return buildDataUrl(page, limit);
                },
                then: data => {
                    if (data.error) {
                        console.error('Error in grid data:', data.error);
                        return [];
                    }
                    if (!data || !data.data) {
                        console.error('Error: Invalid data structure received', data);
                        return [];
                    }

                    // Update performance metrics in UI with seconds
                    if (data.timeSql) {
                        document.getElementById('grid-time-sql').textContent = (data.timeSql).toFixed(4) + 's';
                        if (data.timeSql > 1) {
                            document.getElementById('grid-time-sql').style.color = 'red';
                        }
                    }
                    if (data.timeCount) {
                        document.getElementById('grid-time-count').textContent = (data.timeCount).toFixed(4) + 's';
                        if (data.timeCount > 1) {
                            document.getElementById('grid-time-count').style.color = 'red';
                        }
                    }

                    return data.data;
                },
                total: data => {
                    if (!data.total) {
                        console.error('Error: Invalid total count received', data);
                        return 0;
                    }
                    window.totalRecordCount = data.total;
                    return data.total;
                }
            },
            //sort: true,
            search: true,
            resizable: true
        }).render(document.getElementById('wrapper'));

        // Update URL with current page on pagination change
        window.grid.on('pagination:changed', function(page) {
            const url = new URL(window.location.href);
            url.searchParams.set('page', page);
            window.history.replaceState(null, '', url.toString());
        });

        //grid.on('rowClick', (...args) => console.log('row: ' + JSON.stringify(args), args));
        //grid.on('cellClick', (...args) => console.log('cell: ' + JSON.stringify(args), args));

        // Page size dropdown
        document.getElementById('pageSize').addEventListener('change', function() {
            const newLimit = parseInt(this.value, 10);
            const url = new URL(window.location.href);
            url.searchParams.set('pageSize', newLimit);
            window.location.href = url.toString();
        });

        if (document.getElementById("pageSize")) {
            document.getElementById("pageSize").value = defaultLimit;
        }
    });
</script>

<style>
    .grid-performance-metrics {
        margin: 1rem 0;
        padding: 1rem;
        background: #f8f8f8;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-family: monospace;
    }

    .grid-performance-metrics .metric {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.5rem;
        padding: 0.25rem 0;
    }

    .grid-performance-metrics .metric:last-child {
        margin-bottom: 0;
        border-top: 1px solid #ddd;
        padding-top: 0.5rem;
        margin-top: 0.5rem;
    }

    .grid-performance-metrics .label {
        color: #666;
        font-weight: 600;
    }

    .grid-performance-metrics .value {
        color:rgb(24, 182, 58);
        font-weight: 600;
        font-family: monospace;
        min-width: 100px;
        text-align: right;
    }
</style>

<!-- Render any additional HTML/JS templates configured via layout XML -->
<?= $block->getAditionalHTML() ?>
